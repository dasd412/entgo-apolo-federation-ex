package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"delivery/pkg/ent"
	"delivery/pkg/graph/gen"
)

// CreateDelivery is the resolver for the createDelivery field.
func (r *mutationResolver) CreateDelivery(ctx context.Context, input ent.CreateDeliveryInput) (*ent.Delivery, error) {
	entClient := ent.FromContext(ctx)
	return r.deliveryService.CreateDelivery(ctx, entClient, input)
}

// UpdateDelivery is the resolver for the updateDelivery field.
func (r *mutationResolver) UpdateDelivery(ctx context.Context, id int, input ent.UpdateDeliveryInput) (*ent.Delivery, error) {
	entClient := ent.FromContext(ctx)
	return r.deliveryService.UpdateDelivery(ctx, entClient, id, input)
}

// DeleteDelivery is the resolver for the deleteDelivery field.
func (r *mutationResolver) DeleteDelivery(ctx context.Context, id int) (bool, error) {
	entClient := ent.FromContext(ctx)
	return r.deliveryService.DeleteDelivery(ctx, entClient, id)
}

// Delivery is the resolver for the delivery field.
func (r *queryResolver) Delivery(ctx context.Context, id int) (*ent.Delivery, error) {
	return r.deliveryService.FindDelivery(ctx, r.entClient, id)
}

// Mutation returns gen.MutationResolver implementation.
func (r *Resolver) Mutation() gen.MutationResolver { return &mutationResolver{r} }

// Query returns gen.QueryResolver implementation.
func (r *Resolver) Query() gen.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
