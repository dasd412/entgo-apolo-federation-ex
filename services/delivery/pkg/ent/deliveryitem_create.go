// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"delivery/pkg/ent/delivery"
	"delivery/pkg/ent/deliveryitem"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryItemCreate is the builder for creating a DeliveryItem entity.
type DeliveryItemCreate struct {
	config
	mutation *DeliveryItemMutation
	hooks    []Hook
}

// SetProductName sets the "productName" field.
func (dic *DeliveryItemCreate) SetProductName(s string) *DeliveryItemCreate {
	dic.mutation.SetProductName(s)
	return dic
}

// SetQuantity sets the "quantity" field.
func (dic *DeliveryItemCreate) SetQuantity(i int) *DeliveryItemCreate {
	dic.mutation.SetQuantity(i)
	return dic
}

// SetPrice sets the "price" field.
func (dic *DeliveryItemCreate) SetPrice(f float64) *DeliveryItemCreate {
	dic.mutation.SetPrice(f)
	return dic
}

// SetDeliveryID sets the "delivery" edge to the Delivery entity by ID.
func (dic *DeliveryItemCreate) SetDeliveryID(id int) *DeliveryItemCreate {
	dic.mutation.SetDeliveryID(id)
	return dic
}

// SetNillableDeliveryID sets the "delivery" edge to the Delivery entity by ID if the given value is not nil.
func (dic *DeliveryItemCreate) SetNillableDeliveryID(id *int) *DeliveryItemCreate {
	if id != nil {
		dic = dic.SetDeliveryID(*id)
	}
	return dic
}

// SetDelivery sets the "delivery" edge to the Delivery entity.
func (dic *DeliveryItemCreate) SetDelivery(d *Delivery) *DeliveryItemCreate {
	return dic.SetDeliveryID(d.ID)
}

// Mutation returns the DeliveryItemMutation object of the builder.
func (dic *DeliveryItemCreate) Mutation() *DeliveryItemMutation {
	return dic.mutation
}

// Save creates the DeliveryItem in the database.
func (dic *DeliveryItemCreate) Save(ctx context.Context) (*DeliveryItem, error) {
	return withHooks(ctx, dic.sqlSave, dic.mutation, dic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dic *DeliveryItemCreate) SaveX(ctx context.Context) *DeliveryItem {
	v, err := dic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dic *DeliveryItemCreate) Exec(ctx context.Context) error {
	_, err := dic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dic *DeliveryItemCreate) ExecX(ctx context.Context) {
	if err := dic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dic *DeliveryItemCreate) check() error {
	if _, ok := dic.mutation.ProductName(); !ok {
		return &ValidationError{Name: "productName", err: errors.New(`ent: missing required field "DeliveryItem.productName"`)}
	}
	if _, ok := dic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "DeliveryItem.quantity"`)}
	}
	if _, ok := dic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "DeliveryItem.price"`)}
	}
	return nil
}

func (dic *DeliveryItemCreate) sqlSave(ctx context.Context) (*DeliveryItem, error) {
	if err := dic.check(); err != nil {
		return nil, err
	}
	_node, _spec := dic.createSpec()
	if err := sqlgraph.CreateNode(ctx, dic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dic.mutation.id = &_node.ID
	dic.mutation.done = true
	return _node, nil
}

func (dic *DeliveryItemCreate) createSpec() (*DeliveryItem, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryItem{config: dic.config}
		_spec = sqlgraph.NewCreateSpec(deliveryitem.Table, sqlgraph.NewFieldSpec(deliveryitem.FieldID, field.TypeInt))
	)
	if value, ok := dic.mutation.ProductName(); ok {
		_spec.SetField(deliveryitem.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := dic.mutation.Quantity(); ok {
		_spec.SetField(deliveryitem.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := dic.mutation.Price(); ok {
		_spec.SetField(deliveryitem.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if nodes := dic.mutation.DeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryitem.DeliveryTable,
			Columns: []string{deliveryitem.DeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_delivery_item = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeliveryItemCreateBulk is the builder for creating many DeliveryItem entities in bulk.
type DeliveryItemCreateBulk struct {
	config
	err      error
	builders []*DeliveryItemCreate
}

// Save creates the DeliveryItem entities in the database.
func (dicb *DeliveryItemCreateBulk) Save(ctx context.Context) ([]*DeliveryItem, error) {
	if dicb.err != nil {
		return nil, dicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dicb.builders))
	nodes := make([]*DeliveryItem, len(dicb.builders))
	mutators := make([]Mutator, len(dicb.builders))
	for i := range dicb.builders {
		func(i int, root context.Context) {
			builder := dicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dicb *DeliveryItemCreateBulk) SaveX(ctx context.Context) []*DeliveryItem {
	v, err := dicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dicb *DeliveryItemCreateBulk) Exec(ctx context.Context) error {
	_, err := dicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dicb *DeliveryItemCreateBulk) ExecX(ctx context.Context) {
	if err := dicb.Exec(ctx); err != nil {
		panic(err)
	}
}
