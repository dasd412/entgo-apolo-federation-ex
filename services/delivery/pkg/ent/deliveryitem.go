// Code generated by ent, DO NOT EDIT.

package ent

import (
	"delivery/pkg/ent/delivery"
	"delivery/pkg/ent/deliveryitem"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DeliveryItem is the model entity for the DeliveryItem schema.
type DeliveryItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProductName holds the value of the "productName" field.
	ProductName string `json:"productName,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeliveryItemQuery when eager-loading is set.
	Edges                  DeliveryItemEdges `json:"edges"`
	delivery_delivery_item *int
	selectValues           sql.SelectValues
}

// DeliveryItemEdges holds the relations/edges for other nodes in the graph.
type DeliveryItemEdges struct {
	// Delivery holds the value of the delivery edge.
	Delivery *Delivery `json:"delivery,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// DeliveryOrErr returns the Delivery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryItemEdges) DeliveryOrErr() (*Delivery, error) {
	if e.Delivery != nil {
		return e.Delivery, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: delivery.Label}
	}
	return nil, &NotLoadedError{edge: "delivery"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeliveryItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deliveryitem.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case deliveryitem.FieldID, deliveryitem.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case deliveryitem.FieldProductName:
			values[i] = new(sql.NullString)
		case deliveryitem.ForeignKeys[0]: // delivery_delivery_item
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeliveryItem fields.
func (di *DeliveryItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deliveryitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			di.ID = int(value.Int64)
		case deliveryitem.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field productName", values[i])
			} else if value.Valid {
				di.ProductName = value.String
			}
		case deliveryitem.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				di.Quantity = int(value.Int64)
			}
		case deliveryitem.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				di.Price = value.Float64
			}
		case deliveryitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field delivery_delivery_item", value)
			} else if value.Valid {
				di.delivery_delivery_item = new(int)
				*di.delivery_delivery_item = int(value.Int64)
			}
		default:
			di.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeliveryItem.
// This includes values selected through modifiers, order, etc.
func (di *DeliveryItem) Value(name string) (ent.Value, error) {
	return di.selectValues.Get(name)
}

// QueryDelivery queries the "delivery" edge of the DeliveryItem entity.
func (di *DeliveryItem) QueryDelivery() *DeliveryQuery {
	return NewDeliveryItemClient(di.config).QueryDelivery(di)
}

// Update returns a builder for updating this DeliveryItem.
// Note that you need to call DeliveryItem.Unwrap() before calling this method if this DeliveryItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (di *DeliveryItem) Update() *DeliveryItemUpdateOne {
	return NewDeliveryItemClient(di.config).UpdateOne(di)
}

// Unwrap unwraps the DeliveryItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (di *DeliveryItem) Unwrap() *DeliveryItem {
	_tx, ok := di.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeliveryItem is not a transactional entity")
	}
	di.config.driver = _tx.drv
	return di
}

// String implements the fmt.Stringer.
func (di *DeliveryItem) String() string {
	var builder strings.Builder
	builder.WriteString("DeliveryItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", di.ID))
	builder.WriteString("productName=")
	builder.WriteString(di.ProductName)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", di.Quantity))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", di.Price))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (di DeliveryItem) IsEntity() {}

// DeliveryItems is a parsable slice of DeliveryItem.
type DeliveryItems []*DeliveryItem
