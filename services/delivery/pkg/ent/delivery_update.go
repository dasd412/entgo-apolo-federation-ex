// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"delivery/pkg/ent/delivery"
	"delivery/pkg/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryUpdate is the builder for updating Delivery entities.
type DeliveryUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryMutation
}

// Where appends a list predicates to the DeliveryUpdate builder.
func (du *DeliveryUpdate) Where(ps ...predicate.Delivery) *DeliveryUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetOrderID sets the "order_id" field.
func (du *DeliveryUpdate) SetOrderID(i int) *DeliveryUpdate {
	du.mutation.ResetOrderID()
	du.mutation.SetOrderID(i)
	return du
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableOrderID(i *int) *DeliveryUpdate {
	if i != nil {
		du.SetOrderID(*i)
	}
	return du
}

// AddOrderID adds i to the "order_id" field.
func (du *DeliveryUpdate) AddOrderID(i int) *DeliveryUpdate {
	du.mutation.AddOrderID(i)
	return du
}

// SetStatus sets the "status" field.
func (du *DeliveryUpdate) SetStatus(d delivery.Status) *DeliveryUpdate {
	du.mutation.SetStatus(d)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableStatus(d *delivery.Status) *DeliveryUpdate {
	if d != nil {
		du.SetStatus(*d)
	}
	return du
}

// SetTrackingNumber sets the "tracking_number" field.
func (du *DeliveryUpdate) SetTrackingNumber(s string) *DeliveryUpdate {
	du.mutation.SetTrackingNumber(s)
	return du
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableTrackingNumber(s *string) *DeliveryUpdate {
	if s != nil {
		du.SetTrackingNumber(*s)
	}
	return du
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (du *DeliveryUpdate) ClearTrackingNumber() *DeliveryUpdate {
	du.mutation.ClearTrackingNumber()
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DeliveryUpdate) SetCreatedAt(t time.Time) *DeliveryUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableCreatedAt(t *time.Time) *DeliveryUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// Mutation returns the DeliveryMutation object of the builder.
func (du *DeliveryUpdate) Mutation() *DeliveryMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeliveryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeliveryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeliveryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeliveryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DeliveryUpdate) check() error {
	if v, ok := du.mutation.Status(); ok {
		if err := delivery.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Delivery.status": %w`, err)}
		}
	}
	return nil
}

func (du *DeliveryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(delivery.Table, delivery.Columns, sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.OrderID(); ok {
		_spec.SetField(delivery.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedOrderID(); ok {
		_spec.AddField(delivery.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(delivery.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := du.mutation.TrackingNumber(); ok {
		_spec.SetField(delivery.FieldTrackingNumber, field.TypeString, value)
	}
	if du.mutation.TrackingNumberCleared() {
		_spec.ClearField(delivery.FieldTrackingNumber, field.TypeString)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(delivery.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delivery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeliveryUpdateOne is the builder for updating a single Delivery entity.
type DeliveryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryMutation
}

// SetOrderID sets the "order_id" field.
func (duo *DeliveryUpdateOne) SetOrderID(i int) *DeliveryUpdateOne {
	duo.mutation.ResetOrderID()
	duo.mutation.SetOrderID(i)
	return duo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableOrderID(i *int) *DeliveryUpdateOne {
	if i != nil {
		duo.SetOrderID(*i)
	}
	return duo
}

// AddOrderID adds i to the "order_id" field.
func (duo *DeliveryUpdateOne) AddOrderID(i int) *DeliveryUpdateOne {
	duo.mutation.AddOrderID(i)
	return duo
}

// SetStatus sets the "status" field.
func (duo *DeliveryUpdateOne) SetStatus(d delivery.Status) *DeliveryUpdateOne {
	duo.mutation.SetStatus(d)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableStatus(d *delivery.Status) *DeliveryUpdateOne {
	if d != nil {
		duo.SetStatus(*d)
	}
	return duo
}

// SetTrackingNumber sets the "tracking_number" field.
func (duo *DeliveryUpdateOne) SetTrackingNumber(s string) *DeliveryUpdateOne {
	duo.mutation.SetTrackingNumber(s)
	return duo
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableTrackingNumber(s *string) *DeliveryUpdateOne {
	if s != nil {
		duo.SetTrackingNumber(*s)
	}
	return duo
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (duo *DeliveryUpdateOne) ClearTrackingNumber() *DeliveryUpdateOne {
	duo.mutation.ClearTrackingNumber()
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DeliveryUpdateOne) SetCreatedAt(t time.Time) *DeliveryUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableCreatedAt(t *time.Time) *DeliveryUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// Mutation returns the DeliveryMutation object of the builder.
func (duo *DeliveryUpdateOne) Mutation() *DeliveryMutation {
	return duo.mutation
}

// Where appends a list predicates to the DeliveryUpdate builder.
func (duo *DeliveryUpdateOne) Where(ps ...predicate.Delivery) *DeliveryUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeliveryUpdateOne) Select(field string, fields ...string) *DeliveryUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Delivery entity.
func (duo *DeliveryUpdateOne) Save(ctx context.Context) (*Delivery, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeliveryUpdateOne) SaveX(ctx context.Context) *Delivery {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeliveryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeliveryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeliveryUpdateOne) check() error {
	if v, ok := duo.mutation.Status(); ok {
		if err := delivery.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Delivery.status": %w`, err)}
		}
	}
	return nil
}

func (duo *DeliveryUpdateOne) sqlSave(ctx context.Context) (_node *Delivery, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(delivery.Table, delivery.Columns, sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Delivery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, delivery.FieldID)
		for _, f := range fields {
			if !delivery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != delivery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.OrderID(); ok {
		_spec.SetField(delivery.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedOrderID(); ok {
		_spec.AddField(delivery.FieldOrderID, field.TypeInt, value)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(delivery.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.TrackingNumber(); ok {
		_spec.SetField(delivery.FieldTrackingNumber, field.TypeString, value)
	}
	if duo.mutation.TrackingNumberCleared() {
		_spec.ClearField(delivery.FieldTrackingNumber, field.TypeString)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(delivery.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Delivery{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delivery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
