// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (d *Delivery) DeliveryItem(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *DeliveryItemWhereInput,
) (*DeliveryItemConnection, error) {
	opts := []DeliveryItemPaginateOption{
		WithDeliveryItemFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := d.Edges.totalCount[0][alias]
	if nodes, err := d.NamedDeliveryItem(alias); err == nil || hasTotalCount {
		pager, err := newDeliveryItemPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &DeliveryItemConnection{Edges: []*DeliveryItemEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return d.QueryDeliveryItem().Paginate(ctx, after, first, before, last, opts...)
}

func (di *DeliveryItem) Delivery(ctx context.Context) (*Delivery, error) {
	result, err := di.Edges.DeliveryOrErr()
	if IsNotLoaded(err) {
		result, err = di.QueryDelivery().Only(ctx)
	}
	return result, MaskNotFound(err)
}
