// Code generated by ent, DO NOT EDIT.

package ent

import (
	"delivery/pkg/ent/delivery"
	"delivery/pkg/ent/predicate"
	"errors"
	"fmt"
	"time"
)

// DeliveryWhereInput represents a where input for filtering Delivery queries.
type DeliveryWhereInput struct {
	Predicates []predicate.Delivery  `json:"-"`
	Not        *DeliveryWhereInput   `json:"not,omitempty"`
	Or         []*DeliveryWhereInput `json:"or,omitempty"`
	And        []*DeliveryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "order_id" field predicates.
	OrderID      *int  `json:"orderID,omitempty"`
	OrderIDNEQ   *int  `json:"orderIDNEQ,omitempty"`
	OrderIDIn    []int `json:"orderIDIn,omitempty"`
	OrderIDNotIn []int `json:"orderIDNotIn,omitempty"`
	OrderIDGT    *int  `json:"orderIDGT,omitempty"`
	OrderIDGTE   *int  `json:"orderIDGTE,omitempty"`
	OrderIDLT    *int  `json:"orderIDLT,omitempty"`
	OrderIDLTE   *int  `json:"orderIDLTE,omitempty"`

	// "status" field predicates.
	Status      *delivery.Status  `json:"status,omitempty"`
	StatusNEQ   *delivery.Status  `json:"statusNEQ,omitempty"`
	StatusIn    []delivery.Status `json:"statusIn,omitempty"`
	StatusNotIn []delivery.Status `json:"statusNotIn,omitempty"`

	// "tracking_number" field predicates.
	TrackingNumber             *string  `json:"trackingNumber,omitempty"`
	TrackingNumberNEQ          *string  `json:"trackingNumberNEQ,omitempty"`
	TrackingNumberIn           []string `json:"trackingNumberIn,omitempty"`
	TrackingNumberNotIn        []string `json:"trackingNumberNotIn,omitempty"`
	TrackingNumberGT           *string  `json:"trackingNumberGT,omitempty"`
	TrackingNumberGTE          *string  `json:"trackingNumberGTE,omitempty"`
	TrackingNumberLT           *string  `json:"trackingNumberLT,omitempty"`
	TrackingNumberLTE          *string  `json:"trackingNumberLTE,omitempty"`
	TrackingNumberContains     *string  `json:"trackingNumberContains,omitempty"`
	TrackingNumberHasPrefix    *string  `json:"trackingNumberHasPrefix,omitempty"`
	TrackingNumberHasSuffix    *string  `json:"trackingNumberHasSuffix,omitempty"`
	TrackingNumberIsNil        bool     `json:"trackingNumberIsNil,omitempty"`
	TrackingNumberNotNil       bool     `json:"trackingNumberNotNil,omitempty"`
	TrackingNumberEqualFold    *string  `json:"trackingNumberEqualFold,omitempty"`
	TrackingNumberContainsFold *string  `json:"trackingNumberContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *DeliveryWhereInput) AddPredicates(predicates ...predicate.Delivery) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the DeliveryWhereInput filter on the DeliveryQuery builder.
func (i *DeliveryWhereInput) Filter(q *DeliveryQuery) (*DeliveryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyDeliveryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyDeliveryWhereInput is returned in case the DeliveryWhereInput is empty.
var ErrEmptyDeliveryWhereInput = errors.New("ent: empty predicate DeliveryWhereInput")

// P returns a predicate for filtering deliveries.
// An error is returned if the input is empty or invalid.
func (i *DeliveryWhereInput) P() (predicate.Delivery, error) {
	var predicates []predicate.Delivery
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, delivery.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Delivery, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, delivery.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Delivery, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, delivery.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, delivery.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, delivery.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, delivery.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, delivery.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, delivery.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, delivery.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, delivery.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, delivery.IDLTE(*i.IDLTE))
	}
	if i.OrderID != nil {
		predicates = append(predicates, delivery.OrderIDEQ(*i.OrderID))
	}
	if i.OrderIDNEQ != nil {
		predicates = append(predicates, delivery.OrderIDNEQ(*i.OrderIDNEQ))
	}
	if len(i.OrderIDIn) > 0 {
		predicates = append(predicates, delivery.OrderIDIn(i.OrderIDIn...))
	}
	if len(i.OrderIDNotIn) > 0 {
		predicates = append(predicates, delivery.OrderIDNotIn(i.OrderIDNotIn...))
	}
	if i.OrderIDGT != nil {
		predicates = append(predicates, delivery.OrderIDGT(*i.OrderIDGT))
	}
	if i.OrderIDGTE != nil {
		predicates = append(predicates, delivery.OrderIDGTE(*i.OrderIDGTE))
	}
	if i.OrderIDLT != nil {
		predicates = append(predicates, delivery.OrderIDLT(*i.OrderIDLT))
	}
	if i.OrderIDLTE != nil {
		predicates = append(predicates, delivery.OrderIDLTE(*i.OrderIDLTE))
	}
	if i.Status != nil {
		predicates = append(predicates, delivery.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, delivery.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, delivery.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, delivery.StatusNotIn(i.StatusNotIn...))
	}
	if i.TrackingNumber != nil {
		predicates = append(predicates, delivery.TrackingNumberEQ(*i.TrackingNumber))
	}
	if i.TrackingNumberNEQ != nil {
		predicates = append(predicates, delivery.TrackingNumberNEQ(*i.TrackingNumberNEQ))
	}
	if len(i.TrackingNumberIn) > 0 {
		predicates = append(predicates, delivery.TrackingNumberIn(i.TrackingNumberIn...))
	}
	if len(i.TrackingNumberNotIn) > 0 {
		predicates = append(predicates, delivery.TrackingNumberNotIn(i.TrackingNumberNotIn...))
	}
	if i.TrackingNumberGT != nil {
		predicates = append(predicates, delivery.TrackingNumberGT(*i.TrackingNumberGT))
	}
	if i.TrackingNumberGTE != nil {
		predicates = append(predicates, delivery.TrackingNumberGTE(*i.TrackingNumberGTE))
	}
	if i.TrackingNumberLT != nil {
		predicates = append(predicates, delivery.TrackingNumberLT(*i.TrackingNumberLT))
	}
	if i.TrackingNumberLTE != nil {
		predicates = append(predicates, delivery.TrackingNumberLTE(*i.TrackingNumberLTE))
	}
	if i.TrackingNumberContains != nil {
		predicates = append(predicates, delivery.TrackingNumberContains(*i.TrackingNumberContains))
	}
	if i.TrackingNumberHasPrefix != nil {
		predicates = append(predicates, delivery.TrackingNumberHasPrefix(*i.TrackingNumberHasPrefix))
	}
	if i.TrackingNumberHasSuffix != nil {
		predicates = append(predicates, delivery.TrackingNumberHasSuffix(*i.TrackingNumberHasSuffix))
	}
	if i.TrackingNumberIsNil {
		predicates = append(predicates, delivery.TrackingNumberIsNil())
	}
	if i.TrackingNumberNotNil {
		predicates = append(predicates, delivery.TrackingNumberNotNil())
	}
	if i.TrackingNumberEqualFold != nil {
		predicates = append(predicates, delivery.TrackingNumberEqualFold(*i.TrackingNumberEqualFold))
	}
	if i.TrackingNumberContainsFold != nil {
		predicates = append(predicates, delivery.TrackingNumberContainsFold(*i.TrackingNumberContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, delivery.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, delivery.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, delivery.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, delivery.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, delivery.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, delivery.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, delivery.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, delivery.CreatedAtLTE(*i.CreatedAtLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyDeliveryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return delivery.And(predicates...), nil
	}
}
