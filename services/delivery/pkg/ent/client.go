// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"delivery/pkg/ent/migrate"

	"delivery/pkg/ent/delivery"
	"delivery/pkg/ent/deliveryitem"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Delivery is the client for interacting with the Delivery builders.
	Delivery *DeliveryClient
	// DeliveryItem is the client for interacting with the DeliveryItem builders.
	DeliveryItem *DeliveryItemClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Delivery = NewDeliveryClient(c.config)
	c.DeliveryItem = NewDeliveryItemClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Delivery:     NewDeliveryClient(cfg),
		DeliveryItem: NewDeliveryItemClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Delivery:     NewDeliveryClient(cfg),
		DeliveryItem: NewDeliveryItemClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Delivery.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Delivery.Use(hooks...)
	c.DeliveryItem.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Delivery.Intercept(interceptors...)
	c.DeliveryItem.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DeliveryMutation:
		return c.Delivery.mutate(ctx, m)
	case *DeliveryItemMutation:
		return c.DeliveryItem.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DeliveryClient is a client for the Delivery schema.
type DeliveryClient struct {
	config
}

// NewDeliveryClient returns a client for the Delivery from the given config.
func NewDeliveryClient(c config) *DeliveryClient {
	return &DeliveryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `delivery.Hooks(f(g(h())))`.
func (c *DeliveryClient) Use(hooks ...Hook) {
	c.hooks.Delivery = append(c.hooks.Delivery, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `delivery.Intercept(f(g(h())))`.
func (c *DeliveryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Delivery = append(c.inters.Delivery, interceptors...)
}

// Create returns a builder for creating a Delivery entity.
func (c *DeliveryClient) Create() *DeliveryCreate {
	mutation := newDeliveryMutation(c.config, OpCreate)
	return &DeliveryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Delivery entities.
func (c *DeliveryClient) CreateBulk(builders ...*DeliveryCreate) *DeliveryCreateBulk {
	return &DeliveryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryClient) MapCreateBulk(slice any, setFunc func(*DeliveryCreate, int)) *DeliveryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryCreateBulk{err: fmt.Errorf("calling to DeliveryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Delivery.
func (c *DeliveryClient) Update() *DeliveryUpdate {
	mutation := newDeliveryMutation(c.config, OpUpdate)
	return &DeliveryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryClient) UpdateOne(d *Delivery) *DeliveryUpdateOne {
	mutation := newDeliveryMutation(c.config, OpUpdateOne, withDelivery(d))
	return &DeliveryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryClient) UpdateOneID(id int) *DeliveryUpdateOne {
	mutation := newDeliveryMutation(c.config, OpUpdateOne, withDeliveryID(id))
	return &DeliveryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Delivery.
func (c *DeliveryClient) Delete() *DeliveryDelete {
	mutation := newDeliveryMutation(c.config, OpDelete)
	return &DeliveryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryClient) DeleteOne(d *Delivery) *DeliveryDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryClient) DeleteOneID(id int) *DeliveryDeleteOne {
	builder := c.Delete().Where(delivery.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryDeleteOne{builder}
}

// Query returns a query builder for Delivery.
func (c *DeliveryClient) Query() *DeliveryQuery {
	return &DeliveryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDelivery},
		inters: c.Interceptors(),
	}
}

// Get returns a Delivery entity by its id.
func (c *DeliveryClient) Get(ctx context.Context, id int) (*Delivery, error) {
	return c.Query().Where(delivery.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryClient) GetX(ctx context.Context, id int) *Delivery {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeliveryItem queries the delivery_item edge of a Delivery.
func (c *DeliveryClient) QueryDeliveryItem(d *Delivery) *DeliveryItemQuery {
	query := (&DeliveryItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(delivery.Table, delivery.FieldID, id),
			sqlgraph.To(deliveryitem.Table, deliveryitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, delivery.DeliveryItemTable, delivery.DeliveryItemColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryClient) Hooks() []Hook {
	return c.hooks.Delivery
}

// Interceptors returns the client interceptors.
func (c *DeliveryClient) Interceptors() []Interceptor {
	return c.inters.Delivery
}

func (c *DeliveryClient) mutate(ctx context.Context, m *DeliveryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Delivery mutation op: %q", m.Op())
	}
}

// DeliveryItemClient is a client for the DeliveryItem schema.
type DeliveryItemClient struct {
	config
}

// NewDeliveryItemClient returns a client for the DeliveryItem from the given config.
func NewDeliveryItemClient(c config) *DeliveryItemClient {
	return &DeliveryItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryitem.Hooks(f(g(h())))`.
func (c *DeliveryItemClient) Use(hooks ...Hook) {
	c.hooks.DeliveryItem = append(c.hooks.DeliveryItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryitem.Intercept(f(g(h())))`.
func (c *DeliveryItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryItem = append(c.inters.DeliveryItem, interceptors...)
}

// Create returns a builder for creating a DeliveryItem entity.
func (c *DeliveryItemClient) Create() *DeliveryItemCreate {
	mutation := newDeliveryItemMutation(c.config, OpCreate)
	return &DeliveryItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryItem entities.
func (c *DeliveryItemClient) CreateBulk(builders ...*DeliveryItemCreate) *DeliveryItemCreateBulk {
	return &DeliveryItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryItemClient) MapCreateBulk(slice any, setFunc func(*DeliveryItemCreate, int)) *DeliveryItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryItemCreateBulk{err: fmt.Errorf("calling to DeliveryItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryItem.
func (c *DeliveryItemClient) Update() *DeliveryItemUpdate {
	mutation := newDeliveryItemMutation(c.config, OpUpdate)
	return &DeliveryItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryItemClient) UpdateOne(di *DeliveryItem) *DeliveryItemUpdateOne {
	mutation := newDeliveryItemMutation(c.config, OpUpdateOne, withDeliveryItem(di))
	return &DeliveryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryItemClient) UpdateOneID(id int) *DeliveryItemUpdateOne {
	mutation := newDeliveryItemMutation(c.config, OpUpdateOne, withDeliveryItemID(id))
	return &DeliveryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryItem.
func (c *DeliveryItemClient) Delete() *DeliveryItemDelete {
	mutation := newDeliveryItemMutation(c.config, OpDelete)
	return &DeliveryItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryItemClient) DeleteOne(di *DeliveryItem) *DeliveryItemDeleteOne {
	return c.DeleteOneID(di.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryItemClient) DeleteOneID(id int) *DeliveryItemDeleteOne {
	builder := c.Delete().Where(deliveryitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryItemDeleteOne{builder}
}

// Query returns a query builder for DeliveryItem.
func (c *DeliveryItemClient) Query() *DeliveryItemQuery {
	return &DeliveryItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryItem},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryItem entity by its id.
func (c *DeliveryItemClient) Get(ctx context.Context, id int) (*DeliveryItem, error) {
	return c.Query().Where(deliveryitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryItemClient) GetX(ctx context.Context, id int) *DeliveryItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDelivery queries the delivery edge of a DeliveryItem.
func (c *DeliveryItemClient) QueryDelivery(di *DeliveryItem) *DeliveryQuery {
	query := (&DeliveryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := di.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryitem.Table, deliveryitem.FieldID, id),
			sqlgraph.To(delivery.Table, delivery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deliveryitem.DeliveryTable, deliveryitem.DeliveryColumn),
		)
		fromV = sqlgraph.Neighbors(di.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryItemClient) Hooks() []Hook {
	return c.hooks.DeliveryItem
}

// Interceptors returns the client interceptors.
func (c *DeliveryItemClient) Interceptors() []Interceptor {
	return c.inters.DeliveryItem
}

func (c *DeliveryItemClient) mutate(ctx context.Context, m *DeliveryItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryItem mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Delivery, DeliveryItem []ent.Hook
	}
	inters struct {
		Delivery, DeliveryItem []ent.Interceptor
	}
)
