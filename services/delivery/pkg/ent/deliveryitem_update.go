// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"delivery/pkg/ent/delivery"
	"delivery/pkg/ent/deliveryitem"
	"delivery/pkg/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryItemUpdate is the builder for updating DeliveryItem entities.
type DeliveryItemUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryItemMutation
}

// Where appends a list predicates to the DeliveryItemUpdate builder.
func (diu *DeliveryItemUpdate) Where(ps ...predicate.DeliveryItem) *DeliveryItemUpdate {
	diu.mutation.Where(ps...)
	return diu
}

// SetProductName sets the "productName" field.
func (diu *DeliveryItemUpdate) SetProductName(s string) *DeliveryItemUpdate {
	diu.mutation.SetProductName(s)
	return diu
}

// SetNillableProductName sets the "productName" field if the given value is not nil.
func (diu *DeliveryItemUpdate) SetNillableProductName(s *string) *DeliveryItemUpdate {
	if s != nil {
		diu.SetProductName(*s)
	}
	return diu
}

// SetQuantity sets the "quantity" field.
func (diu *DeliveryItemUpdate) SetQuantity(i int) *DeliveryItemUpdate {
	diu.mutation.ResetQuantity()
	diu.mutation.SetQuantity(i)
	return diu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (diu *DeliveryItemUpdate) SetNillableQuantity(i *int) *DeliveryItemUpdate {
	if i != nil {
		diu.SetQuantity(*i)
	}
	return diu
}

// AddQuantity adds i to the "quantity" field.
func (diu *DeliveryItemUpdate) AddQuantity(i int) *DeliveryItemUpdate {
	diu.mutation.AddQuantity(i)
	return diu
}

// SetPrice sets the "price" field.
func (diu *DeliveryItemUpdate) SetPrice(f float64) *DeliveryItemUpdate {
	diu.mutation.ResetPrice()
	diu.mutation.SetPrice(f)
	return diu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (diu *DeliveryItemUpdate) SetNillablePrice(f *float64) *DeliveryItemUpdate {
	if f != nil {
		diu.SetPrice(*f)
	}
	return diu
}

// AddPrice adds f to the "price" field.
func (diu *DeliveryItemUpdate) AddPrice(f float64) *DeliveryItemUpdate {
	diu.mutation.AddPrice(f)
	return diu
}

// SetDeliveryID sets the "delivery" edge to the Delivery entity by ID.
func (diu *DeliveryItemUpdate) SetDeliveryID(id int) *DeliveryItemUpdate {
	diu.mutation.SetDeliveryID(id)
	return diu
}

// SetNillableDeliveryID sets the "delivery" edge to the Delivery entity by ID if the given value is not nil.
func (diu *DeliveryItemUpdate) SetNillableDeliveryID(id *int) *DeliveryItemUpdate {
	if id != nil {
		diu = diu.SetDeliveryID(*id)
	}
	return diu
}

// SetDelivery sets the "delivery" edge to the Delivery entity.
func (diu *DeliveryItemUpdate) SetDelivery(d *Delivery) *DeliveryItemUpdate {
	return diu.SetDeliveryID(d.ID)
}

// Mutation returns the DeliveryItemMutation object of the builder.
func (diu *DeliveryItemUpdate) Mutation() *DeliveryItemMutation {
	return diu.mutation
}

// ClearDelivery clears the "delivery" edge to the Delivery entity.
func (diu *DeliveryItemUpdate) ClearDelivery() *DeliveryItemUpdate {
	diu.mutation.ClearDelivery()
	return diu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (diu *DeliveryItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, diu.sqlSave, diu.mutation, diu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diu *DeliveryItemUpdate) SaveX(ctx context.Context) int {
	affected, err := diu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (diu *DeliveryItemUpdate) Exec(ctx context.Context) error {
	_, err := diu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diu *DeliveryItemUpdate) ExecX(ctx context.Context) {
	if err := diu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (diu *DeliveryItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(deliveryitem.Table, deliveryitem.Columns, sqlgraph.NewFieldSpec(deliveryitem.FieldID, field.TypeInt))
	if ps := diu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diu.mutation.ProductName(); ok {
		_spec.SetField(deliveryitem.FieldProductName, field.TypeString, value)
	}
	if value, ok := diu.mutation.Quantity(); ok {
		_spec.SetField(deliveryitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := diu.mutation.AddedQuantity(); ok {
		_spec.AddField(deliveryitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := diu.mutation.Price(); ok {
		_spec.SetField(deliveryitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := diu.mutation.AddedPrice(); ok {
		_spec.AddField(deliveryitem.FieldPrice, field.TypeFloat64, value)
	}
	if diu.mutation.DeliveryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryitem.DeliveryTable,
			Columns: []string{deliveryitem.DeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.DeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryitem.DeliveryTable,
			Columns: []string{deliveryitem.DeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, diu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	diu.mutation.done = true
	return n, nil
}

// DeliveryItemUpdateOne is the builder for updating a single DeliveryItem entity.
type DeliveryItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryItemMutation
}

// SetProductName sets the "productName" field.
func (diuo *DeliveryItemUpdateOne) SetProductName(s string) *DeliveryItemUpdateOne {
	diuo.mutation.SetProductName(s)
	return diuo
}

// SetNillableProductName sets the "productName" field if the given value is not nil.
func (diuo *DeliveryItemUpdateOne) SetNillableProductName(s *string) *DeliveryItemUpdateOne {
	if s != nil {
		diuo.SetProductName(*s)
	}
	return diuo
}

// SetQuantity sets the "quantity" field.
func (diuo *DeliveryItemUpdateOne) SetQuantity(i int) *DeliveryItemUpdateOne {
	diuo.mutation.ResetQuantity()
	diuo.mutation.SetQuantity(i)
	return diuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (diuo *DeliveryItemUpdateOne) SetNillableQuantity(i *int) *DeliveryItemUpdateOne {
	if i != nil {
		diuo.SetQuantity(*i)
	}
	return diuo
}

// AddQuantity adds i to the "quantity" field.
func (diuo *DeliveryItemUpdateOne) AddQuantity(i int) *DeliveryItemUpdateOne {
	diuo.mutation.AddQuantity(i)
	return diuo
}

// SetPrice sets the "price" field.
func (diuo *DeliveryItemUpdateOne) SetPrice(f float64) *DeliveryItemUpdateOne {
	diuo.mutation.ResetPrice()
	diuo.mutation.SetPrice(f)
	return diuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (diuo *DeliveryItemUpdateOne) SetNillablePrice(f *float64) *DeliveryItemUpdateOne {
	if f != nil {
		diuo.SetPrice(*f)
	}
	return diuo
}

// AddPrice adds f to the "price" field.
func (diuo *DeliveryItemUpdateOne) AddPrice(f float64) *DeliveryItemUpdateOne {
	diuo.mutation.AddPrice(f)
	return diuo
}

// SetDeliveryID sets the "delivery" edge to the Delivery entity by ID.
func (diuo *DeliveryItemUpdateOne) SetDeliveryID(id int) *DeliveryItemUpdateOne {
	diuo.mutation.SetDeliveryID(id)
	return diuo
}

// SetNillableDeliveryID sets the "delivery" edge to the Delivery entity by ID if the given value is not nil.
func (diuo *DeliveryItemUpdateOne) SetNillableDeliveryID(id *int) *DeliveryItemUpdateOne {
	if id != nil {
		diuo = diuo.SetDeliveryID(*id)
	}
	return diuo
}

// SetDelivery sets the "delivery" edge to the Delivery entity.
func (diuo *DeliveryItemUpdateOne) SetDelivery(d *Delivery) *DeliveryItemUpdateOne {
	return diuo.SetDeliveryID(d.ID)
}

// Mutation returns the DeliveryItemMutation object of the builder.
func (diuo *DeliveryItemUpdateOne) Mutation() *DeliveryItemMutation {
	return diuo.mutation
}

// ClearDelivery clears the "delivery" edge to the Delivery entity.
func (diuo *DeliveryItemUpdateOne) ClearDelivery() *DeliveryItemUpdateOne {
	diuo.mutation.ClearDelivery()
	return diuo
}

// Where appends a list predicates to the DeliveryItemUpdate builder.
func (diuo *DeliveryItemUpdateOne) Where(ps ...predicate.DeliveryItem) *DeliveryItemUpdateOne {
	diuo.mutation.Where(ps...)
	return diuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (diuo *DeliveryItemUpdateOne) Select(field string, fields ...string) *DeliveryItemUpdateOne {
	diuo.fields = append([]string{field}, fields...)
	return diuo
}

// Save executes the query and returns the updated DeliveryItem entity.
func (diuo *DeliveryItemUpdateOne) Save(ctx context.Context) (*DeliveryItem, error) {
	return withHooks(ctx, diuo.sqlSave, diuo.mutation, diuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diuo *DeliveryItemUpdateOne) SaveX(ctx context.Context) *DeliveryItem {
	node, err := diuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (diuo *DeliveryItemUpdateOne) Exec(ctx context.Context) error {
	_, err := diuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diuo *DeliveryItemUpdateOne) ExecX(ctx context.Context) {
	if err := diuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (diuo *DeliveryItemUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(deliveryitem.Table, deliveryitem.Columns, sqlgraph.NewFieldSpec(deliveryitem.FieldID, field.TypeInt))
	id, ok := diuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := diuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryitem.FieldID)
		for _, f := range fields {
			if !deliveryitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := diuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diuo.mutation.ProductName(); ok {
		_spec.SetField(deliveryitem.FieldProductName, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Quantity(); ok {
		_spec.SetField(deliveryitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := diuo.mutation.AddedQuantity(); ok {
		_spec.AddField(deliveryitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := diuo.mutation.Price(); ok {
		_spec.SetField(deliveryitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := diuo.mutation.AddedPrice(); ok {
		_spec.AddField(deliveryitem.FieldPrice, field.TypeFloat64, value)
	}
	if diuo.mutation.DeliveryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryitem.DeliveryTable,
			Columns: []string{deliveryitem.DeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.DeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryitem.DeliveryTable,
			Columns: []string{deliveryitem.DeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeliveryItem{config: diuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, diuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	diuo.mutation.done = true
	return _node, nil
}
