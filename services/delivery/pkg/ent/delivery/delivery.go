// Code generated by ent, DO NOT EDIT.

package delivery

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the delivery type in the database.
	Label = "delivery"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTrackingNumber holds the string denoting the tracking_number field in the database.
	FieldTrackingNumber = "tracking_number"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeDeliveryItem holds the string denoting the delivery_item edge name in mutations.
	EdgeDeliveryItem = "delivery_item"
	// Table holds the table name of the delivery in the database.
	Table = "deliveries"
	// DeliveryItemTable is the table that holds the delivery_item relation/edge.
	DeliveryItemTable = "delivery_items"
	// DeliveryItemInverseTable is the table name for the DeliveryItem entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryitem" package.
	DeliveryItemInverseTable = "delivery_items"
	// DeliveryItemColumn is the table column denoting the delivery_item relation/edge.
	DeliveryItemColumn = "delivery_delivery_item"
)

// Columns holds all SQL columns for delivery fields.
var Columns = []string{
	FieldID,
	FieldOrderID,
	FieldUserID,
	FieldStatus,
	FieldTrackingNumber,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending   Status = "pending"
	StatusInTransit Status = "in_transit"
	StatusDelivered Status = "delivered"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusInTransit, StatusDelivered:
		return nil
	default:
		return fmt.Errorf("delivery: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Delivery queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTrackingNumber orders the results by the tracking_number field.
func ByTrackingNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrackingNumber, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeliveryItemCount orders the results by delivery_item count.
func ByDeliveryItemCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryItemStep(), opts...)
	}
}

// ByDeliveryItem orders the results by delivery_item terms.
func ByDeliveryItem(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryItemStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDeliveryItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeliveryItemTable, DeliveryItemColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
