// Code generated by ent, DO NOT EDIT.

package deliveryitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the deliveryitem type in the database.
	Label = "delivery_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProductName holds the string denoting the productname field in the database.
	FieldProductName = "product_name"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgeDelivery holds the string denoting the delivery edge name in mutations.
	EdgeDelivery = "delivery"
	// Table holds the table name of the deliveryitem in the database.
	Table = "delivery_items"
	// DeliveryTable is the table that holds the delivery relation/edge.
	DeliveryTable = "delivery_items"
	// DeliveryInverseTable is the table name for the Delivery entity.
	// It exists in this package in order to avoid circular dependency with the "delivery" package.
	DeliveryInverseTable = "deliveries"
	// DeliveryColumn is the table column denoting the delivery relation/edge.
	DeliveryColumn = "delivery_delivery_item"
)

// Columns holds all SQL columns for deliveryitem fields.
var Columns = []string{
	FieldID,
	FieldProductName,
	FieldQuantity,
	FieldPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "delivery_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"delivery_delivery_item",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the DeliveryItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProductName orders the results by the productName field.
func ByProductName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductName, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByDeliveryField orders the results by delivery field.
func ByDeliveryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryStep(), sql.OrderByField(field, opts...))
	}
}
func newDeliveryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeliveryTable, DeliveryColumn),
	)
}
