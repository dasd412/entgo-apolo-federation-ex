package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"order/pkg/ent"
	"order/pkg/graph/gen"
	"order/pkg/graph/gen/graphqlmodel"
	"time"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input ent.CreateOrderInput) (*ent.Order, error) {
	entClient := ent.FromContext(ctx)
	return r.orderService.CreateOrder(ctx, entClient, input)
}

// UpdateOrder is the resolver for the updateOrder field.
func (r *mutationResolver) UpdateOrder(ctx context.Context, id int, input ent.UpdateOrderInput) (*ent.Order, error) {
	entClient := ent.FromContext(ctx)
	return r.orderService.UpdateOrder(ctx, entClient, id, input)
}

// DeleteOrder is the resolver for the deleteOrder field.
func (r *mutationResolver) DeleteOrder(ctx context.Context, id int) (bool, error) {
	entClient := ent.FromContext(ctx)
	return r.orderService.DeleteOrder(ctx, entClient, id)
}

// CreateOrderItem is the resolver for the createOrderItem field.
func (r *mutationResolver) CreateOrderItem(ctx context.Context, input ent.CreateOrderItemInput) (*ent.OrderItem, error) {
	entClient := ent.FromContext(ctx)
	return r.orderItemService.CreateOrderItem(ctx, entClient, input)
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id int) (*ent.Order, error) {
	return r.orderService.FindOrder(ctx, r.entClient, id)
}

// OrderItem is the resolver for the orderItem field.
func (r *queryResolver) OrderItem(ctx context.Context, id int) (*ent.OrderItem, error) {
	return r.orderItemService.FindOrderItem(ctx, r.entClient, id)
}

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *graphqlmodel.ExampleTime, error) {
	ch := make(chan *graphqlmodel.ExampleTime)

	// You can (and probably should) handle your channels in a central place outside of `schema.resolvers.go`.
	// For this example we'll simply use a Goroutine with a simple loop.
	go func() {
		// Handle deregistration of the channel here. Note the `defer`
		defer close(ch)

		for {
			// In our example we'll send the current time every second.
			time.Sleep(1 * time.Second)
			fmt.Println("Tick")

			// Prepare your object.
			currentTime := time.Now()
			t := &graphqlmodel.ExampleTime{
				UnixTime:  int(currentTime.Unix()),
				TimeStamp: currentTime.Format(time.RFC3339),
			}

			// The subscription may have got closed due to the client disconnecting.
			// Hence we do send in a select block with a check for context cancellation.
			// This avoids goroutine getting blocked forever or panicking,
			select {
			case <-ctx.Done(): // This runs when context gets cancelled. Subscription closes.
				fmt.Println("Subscription Closed")
				// Handle deregistration of the channel here. `close(ch)`
				return // Remember to return to end the routine.

			case ch <- t: // This is the actual send.
				// Our message went through, do nothing
			}
		}
	}()

	// We return the channel and no error.
	return ch, nil
}

// Mutation returns gen.MutationResolver implementation.
func (r *Resolver) Mutation() gen.MutationResolver { return &mutationResolver{r} }

// Subscription returns gen.SubscriptionResolver implementation.
func (r *Resolver) Subscription() gen.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
