// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (o *Order) OrderItem(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *OrderItemWhereInput,
) (*OrderItemConnection, error) {
	opts := []OrderItemPaginateOption{
		WithOrderItemFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := o.Edges.totalCount[0][alias]
	if nodes, err := o.NamedOrderItem(alias); err == nil || hasTotalCount {
		pager, err := newOrderItemPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &OrderItemConnection{Edges: []*OrderItemEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return o.QueryOrderItem().Paginate(ctx, after, first, before, last, opts...)
}

func (oi *OrderItem) Order(ctx context.Context) (*Order, error) {
	result, err := oi.Edges.OrderOrErr()
	if IsNotLoaded(err) {
		result, err = oi.QueryOrder().Only(ctx)
	}
	return result, MaskNotFound(err)
}
