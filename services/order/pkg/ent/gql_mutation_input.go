// Code generated by ent, DO NOT EDIT.

package ent

import (
	"order/pkg/ent/order"
	"time"
)

// CreateOrderInput represents a mutation input for creating orders.
type CreateOrderInput struct {
	UserID     int
	Status     order.Status
	TotalPrice float64
	CreatedAt  *time.Time
}

// Mutate applies the CreateOrderInput on the OrderMutation builder.
func (i *CreateOrderInput) Mutate(m *OrderMutation) {
	m.SetUserID(i.UserID)
	m.SetStatus(i.Status)
	m.SetTotalPrice(i.TotalPrice)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateOrderInput on the OrderCreate builder.
func (c *OrderCreate) SetInput(i CreateOrderInput) *OrderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrderInput represents a mutation input for updating orders.
type UpdateOrderInput struct {
	UserID     *int
	Status     *order.Status
	TotalPrice *float64
	CreatedAt  *time.Time
}

// Mutate applies the UpdateOrderInput on the OrderMutation builder.
func (i *UpdateOrderInput) Mutate(m *OrderMutation) {
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.TotalPrice; v != nil {
		m.SetTotalPrice(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateOrderInput on the OrderUpdate builder.
func (c *OrderUpdate) SetInput(i UpdateOrderInput) *OrderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrderInput on the OrderUpdateOne builder.
func (c *OrderUpdateOne) SetInput(i UpdateOrderInput) *OrderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
